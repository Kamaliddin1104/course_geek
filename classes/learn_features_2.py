# –û–û–ü, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Python

print('–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ\n')
class User: # –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ
    def __init__(self, *, name: str, equipment: list = None):
        self.name = name
        self.equipment = equipment if equipment is not None else []
        self.life = 3
        # –ø—Ä–∏–Ω—Ç–∏–º —Ç–æ–ª—å–∫–æ –≤ —É—á–µ–±–Ω—ã—Ö —Ü–µ–ª—è—Ö, –∞ –Ω–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
        print(f'–°–æ–∑–¥–∞–ª {self} —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏: \n'
              f'{self.name = }, {self.equipment}, {self.life = }')



print('–°–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑')
q1 = User(name='tundra')
print('–°–æ–∑–¥–∞—ë–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑')
q2 = User(name='Kolotun', equipment=['—Ö–æ–ª–æ–¥–Ω–æ-–ø–∏–∑–¥–µ—Ü', '—Ö–æ—á–µ—Ç—Å—è-–≥—Ä–µ—Ç—å—Å—è'])
print("–°–æ–∑–¥–∞—ë–º —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑")
q3 = User(name='Kolotumba', equipment=['–æ—à–∞–ª–µ—Ç—å-–∫–∞–∫-—Ö–æ–ª–æ–¥–Ω–æ', '—Ö–æ—á–µ—Ç—Å—è-–µ–±–∞—Ç—å—Å—è'])
print('--------------------------')



# –ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ __new__ –ù—É–∂–µ–Ω, —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
print('User2, –¥–∞–Ω–¥–µ—Ä-–º–µ—Ç–æ–¥ - __new__\n')
class User2:
    def __init__(self, *, name):
        self.name = name
        print(f'–°–æ–∑–¥–∞–ª {self.name}')

    def __new__(cls, *args, **kwargs): # __new__ –Ω—É–∂–µ–Ω –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–∞
        instance = super().__new__(cls)
        print(f'–°–æ–∑–¥–∞–ª –∫–ª–∞—Å—Å {cls}')
        return instance


print('C–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑')
w1 = User2(name='Shelly')
print('C–æ–∑–¥–∞—ë–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑')
w2 = User2(name='Bruh')
print('--------------')




print('UserInt(int)\n')
class NamedInt(int):
    def __new__(cls, value, name: str):
        instance = super().__new__(cls, value)
        instance.name = name
        print(f'–°–æ–∑–¥–∞–ª –∫–ª–∞—Å—Å {cls}')
        return instance



e1 = NamedInt(42, '–°–æ—Ä–æ–∫-–î–≤–∞')
e2 = NamedInt(300, '–û—Ç#### —É —Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç–∞')
e3 = NamedInt(777, '–ö—Ä–∞—Å–∏–≤–æ–µ —á–∏—Å–ª–æ')

print(e1.name)
print('---------------')




print('Singleton, –æ–¥–∏–Ω–æ—á–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä\n')
class Singleton:
    _instance = None
    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self, name):
        self.name = name



a = Singleton(name='Kamal')
b = Singleton(name='Restley')

print(a.name, b.name)
print(a is b)
print(id(a), id(b))
print('---------------')



# –ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ __del__ # –£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—ã
# import sys
#
# print('User3, __del__\n')
# class User3:
#     def __init__(self, name: str):
#         self.name = name
#         print(f'–°–æ–∑–¥–∞–ª–∏ {self.name}')
#
#     def __del__(self):
#         print(f'–£–¥–∞–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {self.name}')
#
#
#
# user = User3(name='Kamal')
# print(f"{sys.getrefcount(user) = }") # –í—ã–≤–æ–¥—è—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä
# user2 = user
# print(f"{sys.getrefcount(user) = }, {sys.getrefcount(user2) = }") # –ó–¥–µ—Å—å —Å—á—ë—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–∏–ª—Å—è, –∏–∑-–∑–∞ –Ω–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ—Ç–æ—Ä–∞—è —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç
# del user # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é user –∏ –µ–≥–æ —Å—Å—ã–ª–∫—É
# print(f"{sys.getrefcount(user2) = }")
# print('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã')




# –ò–≥—Ä–∞ —á—Ç–æ –≤–µ—Ä–Ω—ë—Ç –∫–æ–¥?
print('Count, –ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç –∫–æ–¥?\n')

class Count:
    _count = 0
    _last = None
    def __new__(cls, *args, **kwargs):
        if cls._count < 2:
            cls._last = super().__new__(cls)
            cls._count += 1
        return cls._last

    def __init__(self, name: str):
        self.name = name


ekz1 = Count(name='Kamal')
ekz2 = Count(name='Two_ekz')
ekz3 = Count(name='Three_ekz')
ekz4 = Count(name='fourthekz')
print(ekz2.name)
print('--------------')



print('User4, –°—Ç—Ä–æ–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n')
class User4:
    """–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞"""
    def __init__(self, string: str):
        """–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è __init__ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞"""
        self.string = string

    def simple_func(self):
        """–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞"""
        return self.string.capitalize()


# –î–≤–∞ —Å–ø–æ—Å–æ–±–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
r1 = User4(string='Hello, world!')
help(r1) # –ë–æ–ª—å—à–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ –∫–ª–∞—Å—Å–∞
help(User4) # –ë–æ–ª—å—à–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Å–µ
print(User4.__doc__) # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞
print(r1.simple_func.__doc__) # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞
print('----------------------------')




# –ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ __str__ –Ω—É–∂–µ–Ω –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞
print('User5, __str__\n')
class User5:
    def __init__(self, name: str):
        self.name = name

    def func(self):
        self.name.capitalize()


    def __str__(self):
        return f'–≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å –∏–º–µ–Ω–µ–º {self.name}'


t1 = User5(name='Kamaliddin')
print(t1) # –¢–µ–ø–µ—Ä—å –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ __str__, –∞ –Ω–µ <__main__.User5 object at 0x000002E0ED1494F0> üëç
print('--------------------')



# –ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ __repr__ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –æ–±—ä–µ–∫—Ç–∞
print('User6, __repr__\n')
class User6:
    def __init__(self, name: str, equipment: list = None):
        self.name = name
        self.equipment = equipment if equipment is not None else []
        self.life = 3

    def __repr__(self):
        return f'User({self.name}, {self.equipment})'




user = User6(name='Shelly', equipment=['–ö–æ–Ω—Ç—É–∑–∏—è'])
print(user)
print('------------')




print('User7, –ö–∞–∫ –≤—ã–∑–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ __str__ –∏–ª–∏ __repr__ –µ—Å–ª–∏ –≤ –∫–æ–¥–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±–∞?')
class User7:
    def __init__(self, name: str, age: int):
        self.name = name
        self.age = age

    def __str__(self):
        return f'–ò–º—è: {self.name}, –≤–æ–∑—Ä–∞—Å—Ç: {self.age}'

    def __repr__(self):
        return f'User({self.name}, {self.age})'



y1 = User7(name='Kamal', age=16)
print(y1) # –í—ã–≤–æ–¥–∏—Ç—Å—è __str__
print(repr(y1)) # –í—ã–≤–µ–¥–µ—Ç—Å—è __repr__
print('---------------------')



# –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫–ª–∞—Å—Å–∞—Ö

# –°–∫–∏–ø–∞–µ–º —Ç.–∫.–Ω–µ —Ö–æ—á—É –µ–±–∞—Ç—å —Å–µ–±–µ –º–æ–∑–≥–∏, –∏ –≤—Ä—è—Ç –ª–∏ —è –∏–º–∏ –±—É–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è


# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤

# __eq__ - ==
# __ne__ - !=
# __gt__ - >
# __ge__ - <=
# __lt__ - <
# __le__ - >=
print('Triangle, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤\n')
class Triangle:
    def __init__(self, c, d, e):
        self.c = c
        self.d = d
        self.e = e

    def __str__(self):
        return f'–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ {self.c}, {self.d}, {self.e}'

    def __eq__(self, other):
        first = sorted((self.c, self.d, self.e))
        second = sorted((other.a, other.b, other.e))
        return first == second


triangle = Triangle(23, 3, 3)
print(triangle)
print('----------------')



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ç—Ç—Ä–∏–±—É—Ç–æ–≤
# __getattribute__
print('Triangle, __getattr__\n')
class Triangle:
    def __init__(self, c, d, e):
        self.c = c
        self.d = d
        self.e = e

    def __str__(self):
        return f'–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏: {self.c}, {self.d}, {self.e}'

    def __getattribute__(self, item):
        if item == 'z':
            raise AttributeError('–£ –Ω–∞—Å –≤–µ–∫—Ç–æ—Ä –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –∞ –Ω–µ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ')
        return object.__getattribute__(self, item)



triangle = Triangle(2, 12, 2)
# print(triangle.z) # AttributeError(item)
print(triangle.e)
print('---------------')



# __setattr__ –ë–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ç—Ç—Ä–∏–±—É—Ç–∞ –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –∫ –Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—è
print('Triangle2, __getattr__\n')
class Triangle2:
    def __init__(self, c, d, e):
        self.c = c
        self.d = d
        self.e = e

    def __str__(self):
        return f'–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏: {self.c}, {self.d}, {self.e}'

    def __getattribute__(self, item):
        if item == 'z':
            raise AttributeError('–£ –Ω–∞—Å –≤–µ–∫—Ç–æ—Ä –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –∞ –Ω–µ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ')
        return object.__getattribute__(self, item)


triangle2 = Triangle2(12, 2, 21)
triangle2.x = 3 # –ê—Ç—Ç—Ä–∏–±—É—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –±–µ–∑ –ø—Ä–æ–±–ª–µ–º
triangle2.z = 3 # __setattr__ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ z
print('-------------------')



# __getattr__ - –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—ä–µ–∫—Ç—É –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ None
print('Man, __getattr__\n')
class Man:
    def __init__(self, name, age, job):
        self.name = name
        self.age = age
        self.job = job

    def __getattr__(self, item):
        return f'–ù–µ—Ç—É —Ç–∞–∫–æ–≥–æ –∞—Ç—Ç—Ä–∏–±—É—Ç–∞ {item}'


man = Man(name='Alex', age=22, job='Porn-Actor')
print(man.a)
print('----------------')



# __delattr__ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∞—Ç—Ç—Ä–∏–±—É—Ç–∞ –∏–∑ –∫–ª–∞—Å—Å–∞
print('Triangle3, __delattr__\n')
class Triangle3:
    def __init__(self, c, d, e):
        self.c = c
        self.d = d
        self.e = e

    def __str__(self):
        return f'–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏: {self.c}, {self.d}, {self.e}'

    def __getattribute__(self, item):
        if item == 'z':
            raise AttributeError('–£ –Ω–∞—Å –≤–µ–∫—Ç–æ—Ä –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –∞ –Ω–µ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ')
        return object.__getattribute__(self, item)

    def __delattr__(self, item):
        if item in ('c', 'd', 'e'):
            setattr(self, item, 0)
        else:
            object.__delattr__(self, item)

    def __repr__(self):
        return f'Triangle3 = triangle({self.c}, {self.d}, {self.e})'




triangle3 = Triangle3(2, 3, 4)
triangle3.x = 3
print(f"{triangle3 = }, {triangle3.x = }")
del triangle3.c # –ó–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω—É–ª—è–µ—Ç—Å—è
print(f'{triangle3.c}')