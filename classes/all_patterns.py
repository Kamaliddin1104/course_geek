# 1 - Singleton (–û–¥–∏–Ω–æ—á–∫–∞)

class Singleton:
    __instance = None
    def __new__(cls, *args, **kwargs):
        if cls.__instance is None:
            cls.__instance = super().__new__(cls)
            cls.__instance.name = None
            cls.__instance.age = None

        return cls.__instance


    def __str__(self):
        return f'{self.name}, {self.age}'


    def __init__(self, name, age):
        if self.name is None and self.age is None:
            self.name = name
            self.age = age



first = Singleton(name='Kamaliddin', age=17)
second = Singleton(name='Madina', age=16)
third = Singleton(name='Abdusamad', age=16)

print(first) # Kamaliddin, 17
print(second) # Kamaliddin, 17
print(third) # Kamaliddin, 17



# 2 –ü–∞—Ç—Ç–µ—Ä–Ω - Fabric (–§–∞–±—Ä–∏–∫–∞)

# –ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?
# –ö–æ–¥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º ‚Äî –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –º–∞—à–∏–Ω.
# –ö–æ–¥ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤, –∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–±—Ä–∏–∫—É.

# –ü—Ä–∏–º–µ—Ä –±–µ–∑ Fabric
class Tesla:
    @staticmethod
    def drive():
        return "–ï–¥—É –Ω–∞ Tesla"

class BMW:
    @staticmethod
    def drive():
        return "–ï–¥—É –Ω–∞ BMW"

car1 = Tesla()
car2 = BMW()



# –° Fabric
class CarFactory:
    @staticmethod
    def create_car(car_type):
        if car_type == "tesla":
            return Tesla()
        elif car_type == "bmw":
            return BMW()
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–∞—à–∏–Ω—ã")


car = CarFactory.create_car("tesla")
print(car.drive())  # –í—ã–≤–µ–¥–µ—Ç: "–ï–¥—É –Ω–∞ Tesla"



# –ê–¥–∞–ø—Ç–µ—Ä (Adapter)
# üëâ –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç–∞–º —Å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ.

class OldPrinter:
    @staticmethod
    def print_text(self):
        return "–°—Ç–∞—Ä—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä –ø–µ—á–∞—Ç–∞–µ—Ç"

class NewPrinter:
    @staticmethod
    def print(self):
        return "–ù–æ–≤—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä –ø–µ—á–∞—Ç–∞–µ—Ç"

class PrinterAdapter:
    def __init__(self, old_printer):
        self.old_printer = old_printer

    def print(self):
        return self.old_printer.print_text()

printer = PrinterAdapter(OldPrinter())
print(printer.print())  # –°—Ç–∞—Ä—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä –ø–µ—á–∞—Ç–∞–µ—Ç



# –§–∞—Å–∞–¥ (Facade)
# üëâ –£–ø—Ä–æ—â–∞–µ—Ç —Å–ª–æ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
class Engine:
    def start(self):
        return "–î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω"

class Lights:
    def turn_on(self):
        return "–§–∞—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã"

class CarFacade:
    def __init__(self):
        self.engine = Engine()
        self.lights = Lights()

    def start_car(self):
        return f"{self.engine.start()} –∏ {self.lights.turn_on()}"

car = CarFacade()
print(car.start_car())  # –î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω –∏ –§–∞—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã



# –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å (Observer)
# üëâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
class Observer:
    def update(self, message):
        print(f"–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}")

class Subject:
    def __init__(self):
        self.observers = []

    def add_observer(self, observer):
        self.observers.append(observer)

    def notify(self, message):
        for observer in self.observers:
            observer.update(message)

subj = Subject()
obs1 = Observer()
obs2 = Observer()

subj.add_observer(obs1)
subj.add_observer(obs2)

subj.notify("–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!")
# –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!
# –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!



#  –°—Ç—Ä–∞—Ç–µ–≥–∏—è (Strategy)
# üëâ –ü–æ–∑–≤–æ–ª—è–µ—Ç –º–µ–Ω—è—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –ª–µ—Ç—É.
class StrategyA:
    def execute(self):
        return "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è A"

class StrategyB:
    def execute(self):
        return "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è B"

class Context:
    def __init__(self, strategy):
        self.strategy = strategy

    def execute_strategy(self):
        return self.strategy.execute()

context = Context(StrategyA())
print(context.execute_strategy())  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è A

context.strategy = StrategyB()
print(context.execute_strategy())  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è B



# –¶–µ–ø–æ—á–∫–∞ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π (Chain of Responsibility)
# üëâ –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ —Ü–µ–ø–æ—á–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
class Handler:
    def __init__(self, successor=None):
        self.successor = successor

    def handle(self, request):
        if self.successor:
            return self.successor.handle(request)
        return "–ó–∞–ø—Ä–æ—Å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"

class ConcreteHandlerA(Handler):
    def handle(self, request):
        if request == "A":
            return "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ A"
        return super().handle(request)

class ConcreteHandlerB(Handler):
    def handle(self, request):
        if request == "B":
            return "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ B"
        return super().handle(request)

handler_chain = ConcreteHandlerA(ConcreteHandlerB())
print(handler_chain.handle("B"))  # –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ B
